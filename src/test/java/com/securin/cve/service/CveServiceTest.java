package com.securin.cve.service;


import com.securin.cve.client.NvdClient;
import com.securin.cve.data.SetUpData;
import com.securin.cve.entity.CveData;
import com.securin.cve.exception.CveDataNotFoundException;
import com.securin.cve.model.CveResponse;
import com.securin.cve.repo.CveDataRepository;
import com.securin.cve.utils.CveMapper;
import com.securin.cve.utils.CveUtility;
import feign.FeignException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.http.ResponseEntity;

import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class CveServiceTest {

    @InjectMocks
    @Spy
    private CveServiceImpl cveService;

    @Mock
    private CveDataRepository cveDataRepository;

    @Mock
    private NvdClient nvdClient;

    @Spy
    private CveUtility cveUtility;

    @Spy
    @InjectMocks
    private CveMapper cveMapper = new CveMapper(cveUtility);

    private SetUpData setUpData;

    @BeforeEach
    public void setUp() {
        setUpData = new SetUpData();
    }

    @Test
    void shouldReturnCveModelForValidId() {
        var cveData = setUpData.getCveData();
        when(cveDataRepository.findById("CVE-199-0095")).thenReturn(Optional.of(cveData));
        var actual = cveService.getCveDataById("CVE-199-0095");
        var expected = setUpData.getCveModel();
        assertEquals(expected, actual);
    }

    @Test
    void shouldThrowExceptionForUnknownId() {
        when(cveDataRepository.findById("TEST-ID")).thenReturn(Optional.empty());
        when(nvdClient.getCveDataByCveId("TEST-ID")).thenThrow(FeignException.class);
        assertThrows(FeignException.class, () -> cveService.getCveDataById("TEST-ID"));
    }

    @Test
    void shouldReturnCveModelForNewCveId() {
        var nvdClientResponse = setUpData.getNewNvdClientResponse();
        var newCveData = setUpData.getNewCveData();
        when(cveDataRepository.findById("CVE-2023-50685")).thenReturn(Optional.empty());
        when(nvdClient.getCveDataByCveId("CVE-2023-50685")).thenReturn(ResponseEntity.of(Optional.of(nvdClientResponse)));
        when(cveDataRepository.save(newCveData)).thenReturn(newCveData);
        var actual = cveService.getCveDataById("CVE-2023-50685");
        var expected = setUpData.getNewCveModel();
        assertEquals(expected, actual);
    }

    @Test
    void shouldReturnCveResponseForValidScoreAndDefaultInput() {
        var cveDataList = setUpData.getCveDataList();
        var cveModelList = setUpData.getCveModelList();
        when(cveDataRepository.findByBaseScore(5.2, PageRequest.of(0, 200, Sort.by("published")))).thenReturn(cveDataList);
        var actual = cveService.getCveDataByScore(5.2, 0, 200);
        var expected = CveResponse.builder().pageNo(0).resultsPerPage(2)
                .timestamp("2024-05-04T11:22:36.222").vulnerabilities(cveModelList).build();
        assertEquals(expected.getResultsPerPage(), actual.getResultsPerPage());
        assertEquals(expected.getVulnerabilities(), actual.getVulnerabilities());
    }

    @Test
    void shouldReturnCveResponseForValidScoreWithPagination() {
        var cveData = setUpData.getCveData();
        var cveModel = setUpData.getCveModel();
        when(cveDataRepository.findByBaseScore(10D, PageRequest.of(0, 1, Sort.by("published")))).thenReturn(List.of(cveData));
        var actual = cveService.getCveDataByScore(10D, 0, 1);
        var expected = CveResponse.builder().pageNo(0).resultsPerPage(1)
                .timestamp("2024-05-04T11:22:36.222").vulnerabilities(List.of(cveModel)).build();
        assertEquals(expected.getResultsPerPage(), actual.getResultsPerPage());
        assertEquals(expected.getVulnerabilities(), actual.getVulnerabilities());
    }

    @Test
    void shouldThrowExceptionForNoData() {
        when(cveDataRepository.findByBaseScore(10.56, PageRequest.of(0, 200, Sort.by("published")))).thenReturn(List.of());
        assertThrows(CveDataNotFoundException.class, () -> cveService.getCveDataByScore(10.56,0,200));
    }

    @Test
    void shouldReturnCveResponseForLastModifiedDaysAndDefaultInput() {
        var cveDataList = setUpData.getCveDataList();
        var cveModelList = setUpData.getCveModelList();
        when(cveDataRepository.findAllByLastModifiedAfter(any(), eq(PageRequest.of(0, 200, Sort.by("published"))))).thenReturn(cveDataList);
        var actual = cveService.getCveDataByLastModifiedDays(120L, 0, 200);
        var expected = CveResponse.builder().pageNo(0).resultsPerPage(2)
                .timestamp("2024-05-04T11:22:36.222").vulnerabilities(cveModelList).build();
        assertEquals(expected.getResultsPerPage(), actual.getResultsPerPage());
        assertEquals(expected.getVulnerabilities(), actual.getVulnerabilities());
    }

    @Test
    void shouldReturnCveResponseForLastModifiedDaysWithPagination() {
        var cveData = setUpData.getCveData();
        var cveModel = setUpData.getCveModel();
        when(cveDataRepository.findAllByLastModifiedAfter(any(), eq(PageRequest.of(0, 1, Sort.by("published"))))).thenReturn(List.of(cveData));
        var actual = cveService.getCveDataByLastModifiedDays(50L, 0, 1);
        var expected = CveResponse.builder().pageNo(0).resultsPerPage(1)
                .timestamp("2024-05-04T11:22:36.222").vulnerabilities(List.of(cveModel)).build();
        assertEquals(expected.getResultsPerPage(), actual.getResultsPerPage());
        assertEquals(expected.getVulnerabilities(), actual.getVulnerabilities());
    }

    @Test
    void shouldSaveCveData() {
        var cveDataList = setUpData.getCveDataList();
        when(cveDataRepository.saveAll(cveDataList)).thenReturn(cveDataList);
        cveService.saveCveDataToCveCollection(cveDataList);
        verify(cveDataRepository, times(1)).saveAll(cveDataList);
    }

    @Test
    void shouldSaveEmptyListOfCveData() {
        List<CveData> emptyCveData = List.of();
        when(cveDataRepository.saveAll(emptyCveData)).thenReturn(emptyCveData);
        cveService.saveCveDataToCveCollection(emptyCveData);
        verify(cveDataRepository, times(1)).saveAll(emptyCveData);
    }


}

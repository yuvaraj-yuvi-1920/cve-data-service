package com.securin.cve.service;

import com.securin.cve.data.SetUpData;
import com.securin.cve.entity.DeDupDataHold;
import com.securin.cve.repo.CveDataRepository;
import com.securin.cve.repo.DeDupDataHoldRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.core.io.Resource;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.test.util.ReflectionTestUtils;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.URL;
import java.time.LocalDateTime;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class DeDuplicationJobServiceTest {

    @InjectMocks
    @Spy
    private DeDuplicationJobServiceImpl deDuplicationJobService;

    @Mock
    private CveDataRepository cveDataRepository;

    @Mock
    private DeDupDataHoldRepository deDupDataHoldRepository;

    @Mock
    Resource resource;
    private SetUpData setUpData;

    @BeforeEach
    public void setUp() {
        setUpData = new SetUpData();
    }

    @Test
    void shouldReturnAllCveDataByLastModifiedDate() {
        var cveDataList = setUpData.getCveDataList();
        var localDateTime = LocalDateTime.of(2024,5,12,7,8);
        when(cveDataRepository.findAllByLastModifiedAfter(localDateTime, PageRequest.of(10, 200, Sort.by("lastModified")))).thenReturn(cveDataList);
        var actual = deDuplicationJobService.getAllCveDataByLastModifiedDate(localDateTime, 10);
        assertEquals(cveDataList, actual);
    }

    @Test
    void shouldReturnLastModifiedDateIfDataIsPresent() {
        var localDateTime = LocalDateTime.of(2024,5,12,7,8);
        var deDupDataHold = DeDupDataHold.builder().cveId("CVE-2023-50685").lastModifiedDate(localDateTime).build();
        when(deDupDataHoldRepository.findTopByOrderByLastModifiedDateDesc()).thenReturn(Optional.of(deDupDataHold));
        var actual = deDuplicationJobService.getLastModifiedDate();
        assertEquals(localDateTime, actual);
    }

    @Test
    void shouldReturnInitDateIfDataIsNotPresent() {
        when(deDupDataHoldRepository.findTopByOrderByLastModifiedDateDesc()).thenReturn(Optional.empty());
        var actual = deDuplicationJobService.getLastModifiedDate();
        assertEquals(LocalDateTime.of(1900,1,1,0,0), actual);
    }

    @Test
    void shouldReturnDeDupHoldListForCveDataList() {
        ReflectionTestUtils.setField(deDuplicationJobService, "resourceFile", getResource());
        var cveDataList = setUpData.getCveDataList();
        var actual = deDuplicationJobService.convertCveDataListToDeDupHoldList(cveDataList);
        var expected = setUpData.getDeDupDataHoldList();
        assertEquals(expected, actual);
    }

    @Test
    void shouldReturnShortDescFromFullDesc() {
       ReflectionTestUtils.setField(deDuplicationJobService, "resourceFile", getResource());
        var actual = deDuplicationJobService.convertToShorthandDescription("the Description is too Long");
        assertEquals("description too long", actual);
    }

    @Test
    void shouldReturnShortDescFromFullDescWithSpecialChar() {
        ReflectionTestUtils.setField(deDuplicationJobService, "resourceFile", getResource());
        var actual = deDuplicationJobService.convertToShorthandDescription("the = Description is too Long with special ChAR & * $#");
        assertEquals("= description too long special char & * $#", actual);
    }

    private Resource getResource(){
        return  new Resource() {
            @Override
            public boolean exists() {
                return false;
            }

            @Override
            public URL getURL() throws IOException {
                return null;
            }

            @Override
            public URI getURI() throws IOException {
                return URI.create("file:/C:/Users/hp/OneDrive/Documents/project/cve/cve/build/resources/main/commonWords.txt");
            }

            @Override
            public File getFile() throws IOException {
                return null;
            }

            @Override
            public long contentLength() throws IOException {
                return 0;
            }

            @Override
            public long lastModified() throws IOException {
                return 0;
            }

            @Override
            public Resource createRelative(String relativePath) throws IOException {
                return null;
            }

            @Override
            public String getFilename() {
                return "";
            }

            @Override
            public String getDescription() {
                return "";
            }

            @Override
            public InputStream getInputStream() throws IOException {
                return null;
            }
        };
    }
}

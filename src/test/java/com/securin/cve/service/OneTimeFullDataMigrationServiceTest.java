package com.securin.cve.service;

import com.securin.cve.client.NvdClient;
import com.securin.cve.data.SetUpData;
import com.securin.cve.entity.BatchMetaData;
import com.securin.cve.repo.BatchMetaDataRepository;
import com.securin.cve.utils.CveMapper;
import com.securin.cve.utils.CveUtility;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.ResponseEntity;

import java.util.Optional;

import static com.securin.cve.utils.CveConstants.*;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class OneTimeFullDataMigrationServiceTest {

    @InjectMocks
    @Spy
    private OneTimeFullDataMigrationServiceImpl oneTimeFullDataMigrationService;

    @Mock
    private NvdClient nvdClient;

    @Mock
    private BatchMetaDataRepository batchMetaDataRepository;

    @Mock
    private CveService cveService;

    @Spy
    private CveUtility cveUtility;

    @Spy
    @InjectMocks
    private CveMapper cveMapper = new CveMapper(cveUtility);

    private SetUpData setUpData;
    @BeforeEach
    public void setUp() {
        setUpData = new SetUpData();
    }

    @Test
    void shouldRunJobFromFirst() throws InterruptedException {
        var metaData = BatchMetaData.builder().id(1).startIndex(0L).jobStatus(JOB_YET_TO_START_STATUS).build();
        var nvdClientResponse1 = setUpData.getNvdResponseForFullRun1();
        var nvdClientResponse2 = setUpData.getNvdResponseForFullRun2();
        var cveDataList1 = setUpData.get200CveData();
        var cveDataList2 = setUpData.get50CveData();
        when(batchMetaDataRepository.findById(1)).thenReturn(Optional.of(metaData));
        when(nvdClient.getCveDataByResultsPerPageAndStartIndex(200L, 0L))
                .thenReturn(ResponseEntity.status(200).body(nvdClientResponse1));
        when(nvdClient.getCveDataByResultsPerPageAndStartIndex(200L, 200L))
                .thenReturn(ResponseEntity.status(200).body(nvdClientResponse2));
        doNothing().when(cveService).saveCveDataToCveCollection(cveDataList1);
        doNothing().when(cveService).saveCveDataToCveCollection(cveDataList2);
        oneTimeFullDataMigrationService.runJob();
        verify(nvdClient, times(2)).getCveDataByResultsPerPageAndStartIndex(any(), any());
        verify(cveService, times(2)).saveCveDataToCveCollection(any());
    }

    @Test
    void shouldRunJobFromMiddle() throws InterruptedException {
        var metaData = BatchMetaData.builder().id(1).startIndex(1000L).jobStatus(JOB_RUNNING_STATUS).build();
        var nvdClientResponse = setUpData.getNvdResponseForFullRunFromMid();
        var cveDataList = setUpData.get20CveData();
        when(batchMetaDataRepository.findById(1)).thenReturn(Optional.of(metaData));
        when(nvdClient.getCveDataByResultsPerPageAndStartIndex(200L, 1000L))
                .thenReturn(ResponseEntity.status(200).body(nvdClientResponse));
        doNothing().when(cveService).saveCveDataToCveCollection(cveDataList);
        oneTimeFullDataMigrationService.runJob();
        verify(nvdClient, times(1)).getCveDataByResultsPerPageAndStartIndex(any(), any());
        verify(cveService, times(1)).saveCveDataToCveCollection(any());
    }

    @Test
    void shouldReturnLastStartIndexIfDataIsPresent() {
        var metaData = BatchMetaData.builder().id(1).startIndex(5000L).jobStatus(JOB_RUNNING_STATUS).build();
        when(batchMetaDataRepository.findById(1)).thenReturn(Optional.of(metaData));
        var actual = oneTimeFullDataMigrationService.getStartingIndexForFullRunJob();
        assertEquals(5000L, actual);
    }

    @Test
    void shouldReturnZeroIfDataIsNotPresent() {
        when(batchMetaDataRepository.findById(1)).thenReturn(Optional.empty());
        var actual = oneTimeFullDataMigrationService.getStartingIndexForFullRunJob();
        assertEquals(0L, actual);
    }

    @Test
    void shouldUpdateStartIndexToCollection(){
        var metaData = BatchMetaData.builder().id(1).startIndex(500L).jobStatus(JOB_RUNNING_STATUS).build();
        when(batchMetaDataRepository.save(metaData)).thenReturn(metaData);
        oneTimeFullDataMigrationService.updateStartIndexToCollection(500L, JOB_RUNNING_STATUS);
        verify(batchMetaDataRepository, times(1)).save(metaData);
    }
}

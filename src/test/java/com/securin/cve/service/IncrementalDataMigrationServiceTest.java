package com.securin.cve.service;

import com.securin.cve.client.NvdClient;
import com.securin.cve.data.SetUpData;
import com.securin.cve.entity.BatchMetaData;
import com.securin.cve.repo.BatchMetaDataRepository;
import com.securin.cve.repo.CveDataRepository;
import com.securin.cve.utils.CveMapper;
import com.securin.cve.utils.CveUtility;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.ResponseEntity;

import java.time.LocalDateTime;
import java.util.Optional;

import static com.securin.cve.utils.CveConstants.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class IncrementalDataMigrationServiceTest {

    @InjectMocks
    @Spy
    private IncrementalDataMigrationServiceImpl incrementalDataMigrationService;

    @Mock
    private NvdClient nvdClient;

    @Mock
    private BatchMetaDataRepository batchMetaDataRepository;

    @Mock
    private CveDataRepository cveDataRepository;

    @Mock
    private CveService cveService;

    @Spy
    private CveUtility cveUtility;

    @Spy
    @InjectMocks
    private CveMapper cveMapper = new CveMapper(cveUtility);

    private SetUpData setUpData;

    @BeforeEach
    public void setUp() {
        setUpData = new SetUpData();
    }

    @Test
    void shouldNotRunJobIfFullRunIsRunning() throws InterruptedException {
        var metaData = BatchMetaData.builder().id(1).startIndex(5000L).jobStatus(JOB_RUNNING_STATUS).build();
        when(batchMetaDataRepository.findById(1)).thenReturn(Optional.of(metaData));
        incrementalDataMigrationService.runJob();
        verify(cveDataRepository,times(0)).findTopByOrderByLastModifiedDesc();
        verify(nvdClient,times(0)).getCveDataByLastModStartAndEndDateAndResultsPerPageAndStartIndex(any(),any(),eq(200L),eq(0L));
    }

    @Test
    void shouldRunJob() throws InterruptedException {
        var lastCveData = setUpData.getCveData();
        var nvdClientResponse = setUpData.getNvdClientResponse();
        var cveDataList = setUpData.getCveDataList();
        var metaData = BatchMetaData.builder().id(1).startIndex(5000L).jobStatus(JOB_COMPLETED_STATUS).build();
        when(batchMetaDataRepository.findById(1)).thenReturn(Optional.of(metaData));
        when(cveDataRepository.findTopByOrderByLastModifiedDesc()).thenReturn(lastCveData);
        when(nvdClient.getCveDataByLastModStartAndEndDateAndResultsPerPageAndStartIndex("2024-02-01T16:23:31.200+00:00", "2024-05-31T16:23:31.200+00:00", 200L, 0L))
                .thenReturn(ResponseEntity.status(200).body(nvdClientResponse));
        doNothing().when(cveService).saveCveDataToCveCollection(cveDataList);
        incrementalDataMigrationService.runJob();
        verify(cveDataRepository,times(1)).findTopByOrderByLastModifiedDesc();
        verify(nvdClient,times(1)).getCveDataByLastModStartAndEndDateAndResultsPerPageAndStartIndex("2024-02-01T16:23:31.200+00:00", "2024-05-31T16:23:31.200+00:00",200L,0L);
    }

    @Test
    void shouldRunJobWithNIteration() throws InterruptedException {
        var lastCveData = setUpData.getCveDataWithLastModifiedLastYear();
        var nvdClientResponse1 = setUpData.getNvResponseForIncRun1();
        var nvdClientResponse2 = setUpData.getNvResponseForIncRun2();
        var emptyNvdResponse = setUpData.getNvdClientResponseWithEmptyCve();
        var cveDataList1 = setUpData.getCveDataListForIncRun1();
        var cveDataList2 = setUpData.getCveDataListForIncRun2();
        var metaData = BatchMetaData.builder().id(1).startIndex(5000L).jobStatus(JOB_COMPLETED_STATUS).build();
        when(batchMetaDataRepository.findById(1)).thenReturn(Optional.of(metaData));
        when(cveDataRepository.findTopByOrderByLastModifiedDesc()).thenReturn(lastCveData);
        when(nvdClient.getCveDataByLastModStartAndEndDateAndResultsPerPageAndStartIndex("2023-05-01T00:00:00.000+00:00", "2023-08-29T00:00:00.000+00:00", 200L, 0L))
                .thenReturn(ResponseEntity.status(200).body(nvdClientResponse1));
        when(nvdClient.getCveDataByLastModStartAndEndDateAndResultsPerPageAndStartIndex("2023-08-29T00:00:00.000+00:00", "2023-12-27T00:00:00.000+00:00", 200L, 0L))
                .thenReturn(ResponseEntity.status(200).body(nvdClientResponse2));
        when(nvdClient.getCveDataByLastModStartAndEndDateAndResultsPerPageAndStartIndex("2023-12-27T00:00:00.000+00:00", "2024-04-25T00:00:00.000+00:00", 200L, 0L))
                .thenReturn(ResponseEntity.status(200).body(emptyNvdResponse));
        when(nvdClient.getCveDataByLastModStartAndEndDateAndResultsPerPageAndStartIndex("2024-04-25T00:00:00.000+00:00", "2024-08-23T00:00:00.000+00:00", 200L, 0L))
                .thenReturn(ResponseEntity.status(200).body(emptyNvdResponse));
        doNothing().when(cveService).saveCveDataToCveCollection(cveDataList1);
        doNothing().when(cveService).saveCveDataToCveCollection(cveDataList2);
        incrementalDataMigrationService.runJob();
        verify(cveDataRepository,times(1)).findTopByOrderByLastModifiedDesc();
        verify(nvdClient,times(4)).getCveDataByLastModStartAndEndDateAndResultsPerPageAndStartIndex(any(), any(),eq(200L),eq(0L));
    }

    @Test
    void shouldReturnTrueIfStatusIsCompleted() {
        var metaData = BatchMetaData.builder().id(1).startIndex(5000L).jobStatus(JOB_COMPLETED_STATUS).build();
        when(batchMetaDataRepository.findById(1)).thenReturn(Optional.of(metaData));
        var actual = incrementalDataMigrationService.canRunIncrementalJob();
        assertTrue(actual);
    }

    @Test
    void shouldReturnFalseIfStatusIsRunning() {
        var metaData = BatchMetaData.builder().id(1).startIndex(5000L).jobStatus(JOB_RUNNING_STATUS).build();
        when(batchMetaDataRepository.findById(1)).thenReturn(Optional.of(metaData));
        var actual = incrementalDataMigrationService.canRunIncrementalJob();
        assertFalse(actual);
    }

    @Test
    void shouldReturnFalseIfStatusIsYetToStart() {
        var metaData = BatchMetaData.builder().id(1).startIndex(5000L).jobStatus(JOB_YET_TO_START_STATUS).build();
        when(batchMetaDataRepository.findById(1)).thenReturn(Optional.of(metaData));
        var actual = incrementalDataMigrationService.canRunIncrementalJob();
        assertFalse(actual);
    }

    @Test
    void shouldReturnFalseIfDataNotPresent() {
        when(batchMetaDataRepository.findById(1)).thenReturn(Optional.empty());
        var actual = incrementalDataMigrationService.canRunIncrementalJob();
        assertFalse(actual);
    }

    @Test
    void shouldReturnLastModifiedDateIfDataPresent(){
        var cveData = setUpData.getCveData();
        when(cveDataRepository.findTopByOrderByLastModifiedDesc()).thenReturn(cveData);
        var actual = incrementalDataMigrationService.getLastModifiedDataFromCollection();
        assertEquals(LocalDateTime.of(2024, 2, 1, 16, 23, 31, 200000000), actual);
    }

    @Test
    void shouldReturnNullIfDataNotPresent(){
        when(cveDataRepository.findTopByOrderByLastModifiedDesc()).thenReturn(null);
        var actual = incrementalDataMigrationService.getLastModifiedDataFromCollection();
        var expected = LocalDateTime.now();
        assertEquals(expected.getYear(), actual.getYear());
        assertEquals(expected.getMonthValue(), actual.getMonthValue());
        assertEquals(expected.getDayOfMonth(), actual.getDayOfMonth());

    }

}

package com.securin.cve.data;

import com.securin.cve.entity.CveData;
import com.securin.cve.entity.DeDupDataHold;
import com.securin.cve.model.*;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.IntStream;

public class SetUpData {

    public CveModel getCveModel() {
        return CveModel.builder()
                .id("CVE-199-0095")
                .sourceIdentifier("cve@mitreorg")
                .published("1998-06-01T04:00:00.000")
                .lastModified("2024-02-01T16:23:31.200")
                .vulnStatus("Modified")
                .descriptions(List.of(Map.of("lang", "en", "value", "sample description")))
                .metrics(Map.of("cvssMetricV2", List.of(CvssMetricV2Model.builder()
                        .source("nvt#nist.gov")
                        .type("Primary")
                        .cvssData(
                                CvssDataModel.builder()
                                        .version("2.0")
                                        .vectorString("AV://")
                                        .accessVector("NETWORK")
                                        .accessComplexity("LOW")
                                        .baseScore(10D)
                                        .build()
                        )
                        .baseSeverity("HIGH")
                        .exploitabilityScore(10D)
                        .impactScore(10D)
                        .acInsufInfo(false)
                        .obtainAllPrivilege(true)
                        .build())))
                .weaknesses(List.of(WeaknessModel.builder()
                        .source("nvd@dist.gov")
                        .type("Primary")
                        .description(List.of(Map.of("lang", "en", "value", "NVD")))
                        .build()))
                .configurations(List.of(
                        ConfigurationModel.builder().operator("AND").nodes(List.of(
                                NodeModel.builder()
                                        .operator("OR")
                                        .negate(false)
                                        .cpeMatch(List.of(Map.of("vulnerable", true, "criteria", "cpe:2.3")))
                                        .build())).build()))
                .references(List.of(Map.of("url", "http://sd", "source", "cve@mitre.org"),
                        Map.of("url", "http://ab", "source", "cve@mitre.org"),
                        Map.of("url", "http://qa", "source", "cve@mitre.org")))
                .build();
    }

    public CveData getCveData() {
        return CveData.builder()
                .id("CVE-199-0095")
                .sourceIdentifier("cve@mitreorg")
                .published(LocalDateTime.of(1998, 6, 1, 4, 0))
                .lastModified(LocalDateTime.of(2024, 2, 1, 16, 23, 31, 200000000))
                .vulnStatus("Modified")
                .descriptions(List.of(Map.of("lang", "en", "value", "sample description")))
                .metrics(Map.of("cvssMetricV2", List.of(CvssMetricV2Model.builder()
                        .source("nvt#nist.gov")
                        .type("Primary")
                        .cvssData(
                                CvssDataModel.builder()
                                        .version("2.0")
                                        .vectorString("AV://")
                                        .accessVector("NETWORK")
                                        .accessComplexity("LOW")
                                        .baseScore(10D)
                                        .build()
                        )
                        .baseSeverity("HIGH")
                        .exploitabilityScore(10D)
                        .impactScore(10D)
                        .acInsufInfo(false)
                        .obtainAllPrivilege(true)
                        .build())))
                .weaknesses(List.of(WeaknessModel.builder()
                        .source("nvd@dist.gov")
                        .type("Primary")
                        .description(List.of(Map.of("lang", "en", "value", "NVD")))
                        .build()))
                .configurations(List.of(
                        ConfigurationModel.builder().operator("AND").nodes(List.of(
                                NodeModel.builder()
                                        .operator("OR")
                                        .negate(false)
                                        .cpeMatch(List.of(Map.of("vulnerable", true, "criteria", "cpe:2.3")))
                                        .build())).build()))
                .references(List.of(Map.of("url", "http://sd", "source", "cve@mitre.org"),
                        Map.of("url", "http://ab", "source", "cve@mitre.org"),
                        Map.of("url", "http://qa", "source", "cve@mitre.org")))
                .build();

    }

    public List<CveModel> getCveModelList() {
        return List.of(CveModel.builder()
                        .id("CVE-199-0095")
                        .sourceIdentifier("cve@mitreorg")
                        .published("1998-06-01T04:00:00.000")
                        .lastModified("2024-04-01T16:23:31.200")
                        .vulnStatus("Modified")
                        .descriptions(List.of(Map.of("lang", "en", "value", "sample description")))
                        .metrics(Map.of("cvssMetricV2", List.of(CvssMetricV2Model.builder()
                                .source("nvt#nist.gov")
                                .type("Primary")
                                .cvssData(
                                        CvssDataModel.builder()
                                                .version("2.0")
                                                .vectorString("AV://")
                                                .accessVector("NETWORK")
                                                .accessComplexity("LOW")
                                                .baseScore(5.2)
                                                .build()
                                )
                                .baseSeverity("HIGH")
                                .exploitabilityScore(10D)
                                .impactScore(10D)
                                .acInsufInfo(false)
                                .obtainAllPrivilege(true)
                                .build())))
                        .weaknesses(List.of(WeaknessModel.builder()
                                .source("nvd@dist.gov")
                                .type("Primary")
                                .description(List.of(Map.of("lang", "en", "value", "NVD")))
                                .build()))
                        .configurations(List.of(
                                ConfigurationModel.builder().operator("AND").nodes(List.of(
                                        NodeModel.builder()
                                                .operator("OR")
                                                .negate(false)
                                                .cpeMatch(List.of(Map.of("vulnerable", true, "criteria", "cpe:2.3")))
                                                .build())).build()))
                        .references(List.of(Map.of("url", "http://sd", "source", "cve@mitre.org"),
                                Map.of("url", "http://ab", "source", "cve@mitre.org"),
                                Map.of("url", "http://qa", "source", "cve@mitre.org")))
                        .build(),
                CveModel.builder()
                        .id("CVE-2013-4407")
                        .sourceIdentifier("secalert@redhat.com")
                        .published("2013-11-23T18:55:04.657")
                        .lastModified("2024-05-01T18:15:09.047")
                        .vulnStatus("Modified")
                        .descriptions(List.of(Map.of("lang", "en", "value", "\"HTTP::Body::Multipart in the HTTP-Body module for Perl (1.07 through 1.22, before 1.23) uses the part of the uploaded file's name after the first \\\".\\\" character as the suffix of a temporary file, which makes it easier for remote attackers to conduct attacks by leveraging subsequent behavior that may assume the suffix is well-formed.", "es", "HTTP::Body::Multipart en HTTP-Body 1.08, 1.17, y módulos anteriores para Perl, utiliza la parte posterior al primer \\\".\\\" del nombre de fichero subido como el sufijo de un ficheor temporal, lo cual facilita a atacantes remotos ejecutar ataques aprovechando comportamientos que asuman que el sufijo está bien formado.")))
                        .metrics(Map.of("cvssMetricV2", List.of(CvssMetricV2Model.builder()
                                .source("nvt@nist.gov")
                                .type("Primary")
                                .cvssData(
                                        CvssDataModel.builder()
                                                .version("2.0")
                                                .vectorString("AV:N/AC:M/Au:N/C:P/I:P/A:P")
                                                .accessVector("NETWORK")
                                                .accessComplexity("MEDIUM")
                                                .authentication("NONE")
                                                .confidentialityImpact("PARTIAL")
                                                .integrityImpact("PARTIAL")
                                                .availabilityImpact("PARTIAL")
                                                .baseScore(5.2)
                                                .build()
                                )
                                .baseSeverity("MEDIUM")
                                .exploitabilityScore(8.6)
                                .impactScore(6.4)
                                .acInsufInfo(false)
                                .obtainAllPrivilege(true)
                                .obtainUserPrivilege(false)
                                .obtainOtherPrivilege(false)
                                .userInteractionRequired(false)
                                .build())))
                        .weaknesses(List.of(WeaknessModel.builder()
                                .source("nvd@dist.gov")
                                .type("Primary")
                                .description(List.of(Map.of("lang", "en", "value", "NVD-CWE-noinfo")))
                                .build()))
                        .configurations(List.of(
                                ConfigurationModel.builder().nodes(List.of(
                                        NodeModel.builder()
                                                .operator("OR")
                                                .negate(false)
                                                .cpeMatch(List.of(Map.of("vulnerable", true, "criteria", "cpe:2.3:a:http-body_project:http-body:*:*:*:*:*:*:*:*", "versionEndIncluding", "28144E4C-E5E1-4C2E-871C-4DA6BF480D3F")))
                                                .build())).build()))
                        .references(List.of(Map.of("url", "http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=721634", "source", "secalert@redhat.com"),
                                Map.of("url", "http://git.shadowcat.co.uk/gitweb/gitweb.cgi?p=catagits/HTTP-Body.git%3Ba=commit%3Bh=13ac5b23c083bc56e32dd706ca02fca292bd2161", "source", "secalert@redhat.com")))
                        .build());
    }

    public List<CveData> getCveDataList() {
        return List.of(CveData.builder()
                        .id("CVE-199-0095")
                        .sourceIdentifier("cve@mitreorg")
                        .published(LocalDateTime.of(1998, 6, 1, 4, 0))
                        .lastModified(LocalDateTime.of(2024, 4, 1, 16, 23, 31, 200000000))
                        .vulnStatus("Modified")
                        .descriptions(List.of(Map.of("lang", "en", "value", "sample description")))
                        .metrics(Map.of("cvssMetricV2", List.of(CvssMetricV2Model.builder()
                                .source("nvt#nist.gov")
                                .type("Primary")
                                .cvssData(
                                        CvssDataModel.builder()
                                                .version("2.0")
                                                .vectorString("AV://")
                                                .accessVector("NETWORK")
                                                .accessComplexity("LOW")
                                                .baseScore(5.2)
                                                .build()
                                )
                                .baseSeverity("HIGH")
                                .exploitabilityScore(10D)
                                .impactScore(10D)
                                .acInsufInfo(false)
                                .obtainAllPrivilege(true)
                                .build())))
                        .weaknesses(List.of(WeaknessModel.builder()
                                .source("nvd@dist.gov")
                                .type("Primary")
                                .description(List.of(Map.of("lang", "en", "value", "NVD")))
                                .build()))
                        .configurations(List.of(
                                ConfigurationModel.builder().operator("AND").nodes(List.of(
                                        NodeModel.builder()
                                                .operator("OR")
                                                .negate(false)
                                                .cpeMatch(List.of(Map.of("vulnerable", true, "criteria", "cpe:2.3")))
                                                .build())).build()))
                        .references(List.of(Map.of("url", "http://sd", "source", "cve@mitre.org"),
                                Map.of("url", "http://ab", "source", "cve@mitre.org"),
                                Map.of("url", "http://qa", "source", "cve@mitre.org")))
                        .build(),
                CveData.builder()
                        .id("CVE-2013-4407")
                        .sourceIdentifier("secalert@redhat.com")
                        .published(LocalDateTime.of(2013, 11, 23, 18, 55, 4, 657000000))
                        .lastModified(LocalDateTime.of(2024, 5, 1, 18, 15, 9, 47000000))
                        .vulnStatus("Modified")
                        .descriptions(List.of(Map.of("lang", "en", "value", "\"HTTP::Body::Multipart in the HTTP-Body module for Perl (1.07 through 1.22, before 1.23) uses the part of the uploaded file's name after the first \\\".\\\" character as the suffix of a temporary file, which makes it easier for remote attackers to conduct attacks by leveraging subsequent behavior that may assume the suffix is well-formed.", "es", "HTTP::Body::Multipart en HTTP-Body 1.08, 1.17, y módulos anteriores para Perl, utiliza la parte posterior al primer \\\".\\\" del nombre de fichero subido como el sufijo de un ficheor temporal, lo cual facilita a atacantes remotos ejecutar ataques aprovechando comportamientos que asuman que el sufijo está bien formado.")))
                        .metrics(Map.of("cvssMetricV2", List.of(CvssMetricV2Model.builder()
                                .source("nvt@nist.gov")
                                .type("Primary")
                                .cvssData(
                                        CvssDataModel.builder()
                                                .version("2.0")
                                                .vectorString("AV:N/AC:M/Au:N/C:P/I:P/A:P")
                                                .accessVector("NETWORK")
                                                .accessComplexity("MEDIUM")
                                                .authentication("NONE")
                                                .confidentialityImpact("PARTIAL")
                                                .integrityImpact("PARTIAL")
                                                .availabilityImpact("PARTIAL")
                                                .baseScore(5.2)
                                                .build()
                                )
                                .baseSeverity("MEDIUM")
                                .exploitabilityScore(8.6)
                                .impactScore(6.4)
                                .acInsufInfo(false)
                                .obtainAllPrivilege(true)
                                .obtainUserPrivilege(false)
                                .obtainOtherPrivilege(false)
                                .userInteractionRequired(false)
                                .build())))
                        .weaknesses(List.of(WeaknessModel.builder()
                                .source("nvd@dist.gov")
                                .type("Primary")
                                .description(List.of(Map.of("lang", "en", "value", "NVD-CWE-noinfo")))
                                .build()))
                        .configurations(List.of(
                                ConfigurationModel.builder().nodes(List.of(
                                        NodeModel.builder()
                                                .operator("OR")
                                                .negate(false)
                                                .cpeMatch(List.of(Map.of("vulnerable", true, "criteria", "cpe:2.3:a:http-body_project:http-body:*:*:*:*:*:*:*:*", "versionEndIncluding", "28144E4C-E5E1-4C2E-871C-4DA6BF480D3F")))
                                                .build())).build()))
                        .references(List.of(Map.of("url", "http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=721634", "source", "secalert@redhat.com"),
                                Map.of("url", "http://git.shadowcat.co.uk/gitweb/gitweb.cgi?p=catagits/HTTP-Body.git%3Ba=commit%3Bh=13ac5b23c083bc56e32dd706ca02fca292bd2161", "source", "secalert@redhat.com")))
                        .build());
    }

    public NvdClientResponse getNvdClientResponse() {
        return NvdClientResponse.builder()
                .resultsPerPage(188L)
                .startIndex(0L)
                .totalResults(188L)
                .format("NVD_CVE")
                .version("2.0")
                .timestamp("2024-05-04T07:18:59.290")
                .vulnerabilities(List.of(Map.of("cve", getCveModelList().get(0)),
                        Map.of("cve", getCveModelList().get(1))))
                .build();
    }

    public NvdClientResponse getNvdClientResponseWithEmptyCve() {
        return NvdClientResponse.builder()
                .resultsPerPage(0L)
                .startIndex(0L)
                .totalResults(0L)
                .format("NVD_CVE")
                .version("2.0")
                .timestamp("2024-05-04T07:18:59.290")
                .vulnerabilities(List.of())
                .build();
    }

    public NvdClientResponse getNvdClientResponseWithNullCve() {
        var cveNullMap = new HashMap<String, CveModel>() {{
            put("cve", null);
        }};
        return NvdClientResponse.builder()
                .resultsPerPage(488L)
                .startIndex(0L)
                .totalResults(488L)
                .format("NVD_CVE")
                .version("2.0")
                .timestamp("2024-05-04T07:18:59.290")
                .vulnerabilities(List.of(Map.of("cve", getCveModelList().get(0)),
                        Map.of("cve", getCveModelList().get(1)), cveNullMap))
                .build();
    }

    public NvdClientResponse getNvdClientResponseWithOnlyNullCve() {
        var cveNullMap = new HashMap<String, CveModel>() {{
            put("cve", null);
        }};
        return NvdClientResponse.builder()
                .resultsPerPage(488L)
                .startIndex(0L)
                .totalResults(488L)
                .format("NVD_CVE")
                .version("2.0")
                .timestamp("2024-05-04T07:18:59.290")
                .vulnerabilities(List.of(cveNullMap, cveNullMap, cveNullMap))
                .build();
    }

    public NvdClientResponse getNewNvdClientResponse() {
        return NvdClientResponse.builder()
                .resultsPerPage(1L)
                .startIndex(0L)
                .totalResults(1L)
                .format("NVD_CVE")
                .version("2.0")
                .timestamp("2024-05-04T08:27:00.057")
                .vulnerabilities(List.of(Map.of("cve", getNewCveModel())))
                .build();
    }

    public CveModel getNewCveModel() {
        return CveModel.builder()
                .id("CVE-2023-50685")
                .sourceIdentifier("cve@mitre.org")
                .published("2024-05-02T16:15:07.747")
                .lastModified("2024-05-02T18:00:37.360")
                .vulnStatus("Awaiting Analysis")
                .descriptions(List.of(Map.of("lang", "en", "value", "\"An issue in Hipcam Cameras RealServer v.1.0 allows a remote attacker to cause a denial of service via a crafted script to the client_port parameter.")))
                .metrics(Map.of())
                .references(List.of(Map.of("url", "http://sd", "source", "cve@mitre.org"),
                        Map.of("url", "https://github.com/UnderwaterCoder/Hipcam-RTSP-Format-Validation-Vulnerability", "source", "cve@mitre.org")))
                .build();
    }

    public CveData getNewCveData() {
        return CveData.builder()
                .id("CVE-2023-50685")
                .sourceIdentifier("cve@mitre.org")
                .published(LocalDateTime.of(2024, 5, 2, 16, 15, 7, 747000000))
                .lastModified(LocalDateTime.of(2024, 5, 2, 18, 0, 37, 360000000))
                .vulnStatus("Awaiting Analysis")
                .descriptions(List.of(Map.of("lang", "en", "value", "\"An issue in Hipcam Cameras RealServer v.1.0 allows a remote attacker to cause a denial of service via a crafted script to the client_port parameter.")))
                .metrics(Map.of())
                .references(List.of(Map.of("url", "http://sd", "source", "cve@mitre.org"),
                        Map.of("url", "https://github.com/UnderwaterCoder/Hipcam-RTSP-Format-Validation-Vulnerability", "source", "cve@mitre.org")))
                .build();
    }

    public CveData getCveDataWithLastModifiedLastYear() {
        return CveData.builder()
                .id("CVE-199-0095")
                .sourceIdentifier("cve@mitreorg")
                .published(LocalDateTime.of(1998, 6, 1, 4, 0))
                .lastModified(LocalDateTime.of(2023, 5, 1,0,0))
                .vulnStatus("Modified")
                .descriptions(List.of(Map.of("lang", "en", "value", "sample description")))
                .metrics(Map.of("cvssMetricV2", List.of(CvssMetricV2Model.builder()
                        .source("nvt#nist.gov")
                        .type("Primary")
                        .cvssData(
                                CvssDataModel.builder()
                                        .version("2.0")
                                        .vectorString("AV://")
                                        .accessVector("NETWORK")
                                        .accessComplexity("LOW")
                                        .baseScore(10D)
                                        .build()
                        )
                        .baseSeverity("HIGH")
                        .exploitabilityScore(10D)
                        .impactScore(10D)
                        .acInsufInfo(false)
                        .obtainAllPrivilege(true)
                        .build())))
                .weaknesses(List.of(WeaknessModel.builder()
                        .source("nvd@dist.gov")
                        .type("Primary")
                        .description(List.of(Map.of("lang", "en", "value", "NVD")))
                        .build()))
                .configurations(List.of(
                        ConfigurationModel.builder().operator("AND").nodes(List.of(
                                NodeModel.builder()
                                        .operator("OR")
                                        .negate(false)
                                        .cpeMatch(List.of(Map.of("vulnerable", true, "criteria", "cpe:2.3")))
                                        .build())).build()))
                .references(List.of(Map.of("url", "http://sd", "source", "cve@mitre.org"),
                        Map.of("url", "http://ab", "source", "cve@mitre.org"),
                        Map.of("url", "http://qa", "source", "cve@mitre.org")))
                .build();

    }

    public NvdClientResponse getNvResponseForIncRun1() {
        return NvdClientResponse.builder().resultsPerPage(3L).vulnerabilities(List.of(Map.of("cve",getCveModelListForIncRun1().get(0)),
                Map.of("cve",getCveModelListForIncRun1().get(1)),Map.of("cve",getCveModelListForIncRun1().get(2))
        )).build();
    }

    public List<CveModel> getCveModelListForIncRun1() {
        return List.of(CveModel.builder().id("Test-1").lastModified("2023-06-01T00:00:00.000").published("2023-06-01T00:00:00.000").build(),
                CveModel.builder().id("Test-2").lastModified("2023-07-01T00:00:00.000").published("2023-07-01T00:00:00.000").build(),
                CveModel.builder().id("Test-3").lastModified("2023-08-01T00:00:00.000").published("2023-08-01T00:00:00.000").build());
    }

    public List<CveData> getCveDataListForIncRun1() {
        return List.of(CveData.builder().id("Test-1").lastModified(LocalDateTime.of(2023,6,1,0,0)).published(LocalDateTime.of(2023,6,1,0,0)).build(),
                CveData.builder().id("Test-2").lastModified(LocalDateTime.of(2023,7,1,0,0)).published(LocalDateTime.of(2023,7,1,0,0)).build(),
                CveData.builder().id("Test-3").lastModified(LocalDateTime.of(2023,8,1,0,0)).published(LocalDateTime.of(2023,8,1,0,0)).build()
                );
    }

    public NvdClientResponse getNvResponseForIncRun2() {
        return NvdClientResponse.builder().resultsPerPage(3L).vulnerabilities(List.of(Map.of("cve",getCveModelListForIncRun2().get(0)),
                Map.of("cve",getCveModelListForIncRun2().get(1)),Map.of("cve",getCveModelListForIncRun2().get(2))
        )).build();
    }

    public List<CveModel> getCveModelListForIncRun2() {
        return List.of(CveModel.builder().id("Test-1").lastModified("2023-10-01T00:00:00.000").published("2023-10-01T00:00:00.000").build(),
                CveModel.builder().id("Test-2").lastModified("2023-11-01T00:00:00.000").published("2023-11-01T00:00:00.000").build(),
                CveModel.builder().id("Test-3").lastModified("2023-12-01T00:00:00.000").published("2023-12-01T00:00:00.000").build());
    }

    public List<CveData> getCveDataListForIncRun2() {
        return List.of(CveData.builder().id("Test-1").lastModified(LocalDateTime.of(2023,10,1,0,0)).published(LocalDateTime.of(2023,10,1,0,0)).build(),
                CveData.builder().id("Test-2").lastModified(LocalDateTime.of(2023,11,1,0,0)).published(LocalDateTime.of(2023,11,1,0,0)).build(),
                CveData.builder().id("Test-3").lastModified(LocalDateTime.of(2023,12,1,0,0)).published(LocalDateTime.of(2023,12,1,0,0)).build()
        );
    }

    public NvdClientResponse getNvdResponseForFullRun1() {
        var vulnerabilities = get200CveModel().stream().map(cve -> Map.of("cve",cve)).toList();
        return NvdClientResponse.builder().startIndex(0L).resultsPerPage(200L)
                .totalResults(250L).vulnerabilities(vulnerabilities).build();
    }

    public NvdClientResponse getNvdResponseForFullRun2() {
        var vulnerabilities = get50CveModel().stream().map(cve -> Map.of("cve",cve)).toList();
        return NvdClientResponse.builder().startIndex(200L).resultsPerPage(50L)
                .totalResults(250L).vulnerabilities(vulnerabilities).build();
    }

    public List<CveData> get200CveData(){
        return IntStream.range(0,200).mapToObj(i ->
            CveData.builder().id("CVE_" +i)
                    .lastModified(LocalDateTime.of(2013,5,4,11,12))
                    .published(LocalDateTime.of(1998,8,4,13,1))
                    .metrics(null).references(null).weaknesses(null).descriptions(null).vulnStatus(null).sourceIdentifier(null)
                    .configurations(null).build()
        ).toList();
    }

    public List<CveData> get50CveData(){
        return IntStream.range(200,250).mapToObj(i ->
                CveData.builder().id("CVE_" +i)
                        .lastModified(LocalDateTime.of(2015,5,4,11,12))
                        .published(LocalDateTime.of(1999,8,4,13,1)).build()
        ).toList();
    }

    public List<CveModel> get200CveModel(){
        return IntStream.range(0,200).mapToObj(i ->
                CveModel.builder().id("CVE_" +i).lastModified("2013-05-04T11:12:00.000")
                        .published("1998-08-04T13:01:00.000").metrics(null).references(null).weaknesses(null).descriptions(null).vulnStatus(null).sourceIdentifier(null)
                        .configurations(null).build()
        ).toList();
    }

    public List<CveModel> get50CveModel(){
        return IntStream.range(200,250).mapToObj(i ->
                CveModel.builder().id("CVE_" +i).lastModified("2015-05-04T11:12:00.000")
                        .published("1999-08-04T13:01:00.000").build()
        ).toList();
    }

    public NvdClientResponse getNvdResponseForFullRunFromMid() {
        var vulnerabilities = get20CveModel().stream().map(cve -> Map.of("cve",cve)).toList();
        return NvdClientResponse.builder().startIndex(1000L).resultsPerPage(20L)
                .totalResults(1050L).vulnerabilities(vulnerabilities).build();
    }

    public List<CveData> get20CveData(){
        return IntStream.range(1000,1050).mapToObj(i ->
                CveData.builder().id("CVE_" +i)
                        .lastModified(LocalDateTime.of(2015,5,4,11,12))
                        .published(LocalDateTime.of(1999,8,4,13,1)).build()
        ).toList();
    }

    public List<CveModel> get20CveModel(){
        return IntStream.range(1000,1050).mapToObj(i ->
                CveModel.builder().id("CVE_" +i).lastModified("2015-05-04T11:12:00.000")
                        .published("1999-08-04T13:01:00.000").build()
        ).toList();
    }

    public List<DeDupDataHold> getDeDupDataHoldList() {
        return List.of(DeDupDataHold.builder().cveId("CVE-199-0095").cveDescription("sample description").lastModifiedDate(LocalDateTime.of(2024, 4, 1, 16, 23, 31, 200000000)).build(),
                DeDupDataHold.builder().cveId("CVE-2013-4407").cveDescription("\"http::body::multipart in  http-body module perl (1.07 through 1.22, before 1.23) uses  part  uploaded file's name after  first \\\".\\\" character as  suffix a temporary file, which makes it easier remote attackers to conduct attacks by leveraging subsequent behavior that may assume  suffix well-formed.").lastModifiedDate(LocalDateTime.of(2024, 5, 1, 18, 15, 9, 47000000)).build());
    }
}

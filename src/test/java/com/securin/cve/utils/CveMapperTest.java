package com.securin.cve.utils;

import com.securin.cve.data.SetUpData;
import jakarta.validation.ConstraintViolationException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

@SpringBootTest
public class CveMapperTest {

    @Autowired
    private CveMapper cveMapper;

    private SetUpData setUpData;

    @BeforeEach
    void setUp() {
        setUpData = new SetUpData();
    }

    @Test
    void shouldReturnCveDataForValidCveModel(){
        var cveModel = setUpData.getCveModel();
        var actual = cveMapper.fromCveModelToCveData(cveModel);
        var expected = setUpData.getCveData();
        assertEquals(expected, actual);
    }

    @Test
    void shouldThrowExceptionForNullCveModel(){
        assertThrows(ConstraintViolationException.class, () -> cveMapper.fromCveModelToCveData(null));
    }

    @Test
    void shouldReturnCveModelForValidCveData(){
        var cveData = setUpData.getCveData();
        var actual = cveMapper.fromCveDataToCveModel(cveData);
        var expected = setUpData.getCveModel();
        assertEquals(expected, actual);
    }

    @Test
    void shouldThrowExceptionForNullCveData(){
        assertThrows(ConstraintViolationException.class, () -> cveMapper.fromCveDataToCveModel(null));
    }

    @Test
    void shouldReturnCveDataListForValidNvdResponse(){
        var nvdClientResponse = setUpData.getNvdClientResponse();
        var actual = cveMapper.mapNvdResponseToCveDataList(nvdClientResponse);
        var expected = setUpData.getCveDataList();
        assertEquals(expected, actual);
    }

    @Test
    void shouldReturnEmptyListForEmptyCveData(){
        var nvdClientResponse = setUpData.getNvdClientResponseWithEmptyCve();
        var actual = cveMapper.mapNvdResponseToCveDataList(nvdClientResponse);
        assertEquals(List.of(), actual);
    }

    @Test
    void shouldReturnNotNullListForCveDataWithNull(){
        var nvdClientResponse = setUpData.getNvdClientResponseWithNullCve();
        var actual = cveMapper.mapNvdResponseToCveDataList(nvdClientResponse);
        var expected = setUpData.getCveDataList();
        assertEquals(expected, actual);
    }

    @Test
    void shouldReturnEmptyListForCveDataWithOnlyNull(){
        var nvdClientResponse = setUpData.getNvdClientResponseWithOnlyNullCve();
        var actual = cveMapper.mapNvdResponseToCveDataList(nvdClientResponse);
        assertEquals(List.of(), actual);
    }

    @Test
    void shouldThrowExceptionForNullResponseInput(){
        assertThrows(ConstraintViolationException.class, () -> cveMapper.mapNvdResponseToCveDataList(null));
    }
}

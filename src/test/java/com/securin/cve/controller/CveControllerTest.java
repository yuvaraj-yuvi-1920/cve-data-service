package com.securin.cve.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.securin.cve.data.SetUpData;
import com.securin.cve.model.CveErrorResponse;
import com.securin.cve.repo.CveDataRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

import java.util.Base64;
import java.util.Optional;
import java.util.stream.IntStream;

import static org.hamcrest.Matchers.containsInAnyOrder;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.when;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@AutoConfigureMockMvc
public class CveControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;

    @MockBean
    private CveDataRepository cveDataRepository;

    private SetUpData setUpData;

    private static final String BASE_URL = "/api/v1/cve/";

    private static final String AUTHORIZATION = "Authorization";

    @BeforeEach
    void setUp() {
        setUpData = new SetUpData();
    }

    @Test
    void shouldGetCveModelForValidId() throws Exception {
        var cveData = setUpData.getCveData();
        var cveModel = setUpData.getCveModel();
        var expectedAsString = objectMapper.writeValueAsString(cveModel);
        when(cveDataRepository.findById("CVE-199-0095")).thenReturn(Optional.of(cveData));
        mockMvc.perform(MockMvcRequestBuilders.get(BASE_URL + "by-id?cveId=CVE-199-0095")
                        .header(AUTHORIZATION, encodeUserNameAndPassword()))
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.content().json(expectedAsString));
    }

    @Test
    void shouldGetErrorResponseForEmptyId() throws Exception {
        var errorResponse = CveErrorResponse.builder().code(422).message("Invalid request parameters").build();
        var expectedAsString = objectMapper.writeValueAsString(errorResponse);
        mockMvc.perform(MockMvcRequestBuilders.get(BASE_URL + "by-id?cveId=  ")
                        .header(AUTHORIZATION, encodeUserNameAndPassword()))
                .andExpect(MockMvcResultMatchers.status().isUnprocessableEntity())
                .andExpect(MockMvcResultMatchers.content().json(expectedAsString));
    }

    @Test
    void shouldGetCveModelListForValidScoreOnly() throws Exception {
        var cveDataList = setUpData.get200CveData();
        var cveModelIdList = IntStream.range(0,200).boxed().map(i -> "CVE_"+i).toList();
        when(cveDataRepository.findByBaseScore(10.3, PageRequest.of(0,200, Sort.by("published")))).thenReturn(cveDataList);
        mockMvc.perform(MockMvcRequestBuilders.get(BASE_URL + "by-score?score=10.3")
                        .header(AUTHORIZATION, encodeUserNameAndPassword()))
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath("$.pageNo").value(0))
                .andExpect(MockMvcResultMatchers.jsonPath("$.resultsPerPage").value(200))
                .andExpect(MockMvcResultMatchers.jsonPath("$.vulnerabilities[*].id", containsInAnyOrder(cveModelIdList.toArray(new String[0]))));
    }

    @Test
    void shouldGetCveModelListForValidScoreWithPagination() throws Exception {
        var cveDataList = setUpData.getCveDataList();
        when(cveDataRepository.findByBaseScore(5.2, PageRequest.of(0,2, Sort.by("published")))).thenReturn(cveDataList);
        mockMvc.perform(MockMvcRequestBuilders.get(BASE_URL + "by-score?score=5.2&resultsPerPage=2")
                        .header(AUTHORIZATION, encodeUserNameAndPassword()))
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath("$.pageNo").value(0))
                .andExpect(MockMvcResultMatchers.jsonPath("$.resultsPerPage").value(2))
                .andExpect(MockMvcResultMatchers.jsonPath("$.vulnerabilities[0].id").value("CVE-199-0095"))
                .andExpect(MockMvcResultMatchers.jsonPath("$.vulnerabilities[1].id").value("CVE-2013-4407"));
    }

    @Test
    void shouldGetErrorResponseIfDataIsNorPresent() throws Exception {
        var errorResponse = CveErrorResponse.builder().code(404).message("Cve Data not found").build();
        var expectedAsString = objectMapper.writeValueAsString(errorResponse);
        mockMvc.perform(MockMvcRequestBuilders.get(BASE_URL + "by-score?score=-1")
                        .header(AUTHORIZATION, encodeUserNameAndPassword()))
                .andExpect(MockMvcResultMatchers.status().isNotFound())
                .andExpect(MockMvcResultMatchers.content().json(expectedAsString));
    }

    @Test
    void shouldGetCveModelListForLastModifiedDays() throws Exception {
        var cveDataList = setUpData.getCveDataList();
        when(cveDataRepository.findAllByLastModifiedAfter(any(), eq(PageRequest.of(0,200, Sort.by("published"))))).thenReturn(cveDataList);
        mockMvc.perform(MockMvcRequestBuilders.get(BASE_URL + "by-lastModifiedDay?noOfDays=60")
                        .header(AUTHORIZATION, encodeUserNameAndPassword()))
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath("$.pageNo").value(0))
                .andExpect(MockMvcResultMatchers.jsonPath("$.resultsPerPage").value(2))
                .andExpect(MockMvcResultMatchers.jsonPath("$.vulnerabilities[0].id").value("CVE-199-0095"))
                .andExpect(MockMvcResultMatchers.jsonPath("$.vulnerabilities[1].id").value("CVE-2013-4407"));
    }

    private String encodeUserNameAndPassword(){
        return "Basic " + Base64.getEncoder().encodeToString("test:test-password".getBytes());
    }
}

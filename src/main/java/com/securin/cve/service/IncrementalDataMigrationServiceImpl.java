package com.securin.cve.service;

import com.securin.cve.client.NvdClient;
import com.securin.cve.entity.BatchMetaData;
import com.securin.cve.entity.CveData;
import com.securin.cve.model.NvdClientResponse;
import com.securin.cve.repo.BatchMetaDataRepository;
import com.securin.cve.repo.CveDataRepository;
import com.securin.cve.utils.CveMapper;
import com.securin.cve.utils.CveUtility;
import feign.FeignException;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;

import static com.securin.cve.utils.CveConstants.*;
import static com.securin.cve.utils.CveConstants.RESULTS_PER_PAGE;

@Service
@RequiredArgsConstructor
@Slf4j
public class IncrementalDataMigrationServiceImpl implements IncrementalDataMigrationService{

    private final NvdClient nvdClient;

    private final BatchMetaDataRepository batchMetaDataRepository;

    private final CveDataRepository cveDataRepository;

    private final CveService cveService;

    private final CveUtility cveUtility;

    private final CveMapper cveMapper;

    @Override
    public void runJob() throws InterruptedException {
        if (canRunIncrementalJob()) {
            LocalDateTime lastModifiedDate = getLastModifiedDataFromCollection();
            log.info("Incremental job started from last modified data {}", lastModifiedDate);
            LocalDateTime lastModifiedPlus120 = lastModifiedDate.plusDays(120);
            do {
                var startDateString = cveUtility.convertDateTimeToString(lastModifiedDate) + "+00:00";
                var endDateString = cveUtility.convertDateTimeToString(lastModifiedPlus120) + "+00:00";
                getAndSaveCveDataByBatch(startDateString, endDateString);
                lastModifiedDate = lastModifiedPlus120;
                lastModifiedPlus120 = lastModifiedPlus120.plusDays(120);
            } while (lastModifiedDate.isBefore(LocalDateTime.now()));
            log.info("Incremental job completed successfully!!");
        }
    }

    public boolean canRunIncrementalJob() {
        var batchMetaDataOpt = batchMetaDataRepository.findById(1);
        return batchMetaDataOpt.orElse(BatchMetaData.builder().jobStatus(JOB_YET_TO_START_STATUS).build())
                .getJobStatus().equals(JOB_COMPLETED_STATUS);
    }

    private void getAndSaveCveDataByBatch(String startDateString, String endDateString) throws InterruptedException {
        Long resultsPerPage = RESULTS_PER_PAGE;
        Long startIndex = 0L;
        while (resultsPerPage >= RESULTS_PER_PAGE) {
            NvdClientResponse nvdClientResponse = getNvdDataFromStartToEndDate(startDateString, endDateString, resultsPerPage, startIndex, 0);
            if (nvdClientResponse != null) {
                List<CveData> cveDataList = cveMapper.mapNvdResponseToCveDataList(nvdClientResponse);
                cveService.saveCveDataToCveCollection(cveDataList);
                resultsPerPage = nvdClientResponse.getResultsPerPage();
                Thread.sleep(6000);
                startIndex += resultsPerPage;
            } else {
                log.error("NULL response from nvd client. Stopping the incremental job!!");
                break;
            }

        }
    }

    public LocalDateTime getLastModifiedDataFromCollection() {
        var cveData = cveDataRepository.findTopByOrderByLastModifiedDesc();
        return cveData != null ? cveData.getLastModified() : LocalDateTime.now();
    }

    private NvdClientResponse getNvdDataFromStartToEndDate(String startDateString, String endDateString, Long resultsPerPage, Long startIndex, int noOfTry) throws InterruptedException {
        if (noOfTry < 3) {
            try {
                ResponseEntity<NvdClientResponse> nvdResponse = nvdClient.getCveDataByLastModStartAndEndDateAndResultsPerPageAndStartIndex(startDateString, endDateString, resultsPerPage, startIndex);
                if (nvdResponse.getStatusCode().is2xxSuccessful()) {
                    return nvdResponse.getBody();
                } else {
                    Thread.sleep(6000);
                    return getNvdDataFromStartToEndDate(startDateString, endDateString, resultsPerPage, startIndex, noOfTry + 1);
                }
            }
            catch (FeignException e) {
                log.error("Error while communicating with nvd endpoint for start date {}, end date {}, start index {}", startDateString, endDateString, startIndex, e);
            }
        }
        return null;
    }

}

package com.securin.cve.service;

import com.securin.cve.client.NvdClient;
import com.securin.cve.entity.CveData;
import com.securin.cve.exception.CveDataNotFoundException;
import com.securin.cve.model.CveModel;
import com.securin.cve.model.CveResponse;
import com.securin.cve.model.NvdClientResponse;
import com.securin.cve.repo.CveDataRepository;
import com.securin.cve.utils.CveUtility;
import com.securin.cve.utils.CveMapper;
import feign.FeignException;
import jakarta.validation.constraints.NotEmpty;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.dao.DataAccessException;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
@Slf4j
public class CveServiceImpl implements CveService {

    private final CveDataRepository cveDataRepository;

    private final NvdClient nvdClient;

    private final CveMapper cveMapper;

    private final CveUtility cveUtility;

    @Override
    public CveModel getCveDataById(String id) throws FeignException, CveDataNotFoundException {
        Optional<CveData> cveDataOptional = cveDataRepository.findById(id);
        if(cveDataOptional.isPresent()) {
            var cveData =  cveDataOptional.get();
            return cveMapper.fromCveDataToCveModel(cveData);
        } else{
            var cveModel =  getAndSaveNvdDataById(id);
            if(cveModel != null) {
                return cveModel;
            }
        }
        throw new CveDataNotFoundException();
    }

    private CveModel getAndSaveNvdDataById(String cveId) {
            ResponseEntity<NvdClientResponse> nvdResponse = nvdClient.getCveDataByCveId(cveId);
            if (nvdResponse.getStatusCode().is2xxSuccessful()) {
                NvdClientResponse nvdClientResponse = nvdResponse.getBody();
                if(nvdClientResponse != null && nvdClientResponse.getVulnerabilities() != null && !nvdClientResponse.getVulnerabilities().isEmpty()) {
                    CveModel cveModel = nvdClientResponse.getVulnerabilities().get(0).get("cve");
                    CveData cveData = cveMapper.fromCveModelToCveData(cveModel);
                    cveDataRepository.save(cveData);
                    return cveModel;
                }
            }
            log.error("Could not able to retrieve data from nv api for id {}", cveId);
            return null;
        }

    @Override
    public CveResponse getCveDataByScore(Double score, int startIndex, int resultsPerPage) {
        List<CveData> cveData = cveDataRepository.findByBaseScore(score, PageRequest.of(startIndex, resultsPerPage, Sort.by("published")));
        if(cveData.isEmpty()) {
            log.error("Data not for score {}", score);
            throw new CveDataNotFoundException();
        }
        return CveResponse.builder()
                .pageNo(startIndex)
                .resultsPerPage(cveData.size())
                .timestamp(cveUtility.convertDateTimeToString(LocalDateTime.now()))
                .vulnerabilities(cveData.stream().map(cveMapper::fromCveDataToCveModel).toList())
                .build();
    }

    @Override
    public CveResponse getCveDataByLastModifiedDays(Long lastModifiedDays, int startIndex, int resultsPerPage){
        LocalDateTime lastModifiedDate = LocalDateTime.now().minusDays(lastModifiedDays);
        List<CveData> cveData = cveDataRepository.findAllByLastModifiedAfter(lastModifiedDate, PageRequest.of(startIndex, resultsPerPage, Sort.by("published")));
        if (cveData.isEmpty()) {
            log.error("Data not from last modified date {}", lastModifiedDate);
            throw new CveDataNotFoundException();
        }
        return CveResponse.builder()
                .pageNo(startIndex)
                .resultsPerPage(cveData.size())
                .timestamp(cveUtility.convertDateTimeToString(LocalDateTime.now()))
                .vulnerabilities(cveData.stream().map(cveMapper::fromCveDataToCveModel).toList())
                .build();
    }

    @Override
    public void saveCveDataToCveCollection(@NotEmpty List<CveData> cveDataList) {
        try {
            cveDataRepository.saveAll(cveDataList);
        }
        catch (DataAccessException e){
            log.error("Error while saving the data list {}", cveDataList);
        }
    }

}

package com.securin.cve.utils;

import com.securin.cve.entity.CveData;
import com.securin.cve.model.CveModel;
import com.securin.cve.model.NvdClientResponse;
import jakarta.validation.constraints.NotNull;
import lombok.NoArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.validation.annotation.Validated;

import java.util.List;
import java.util.Objects;

@Component
@NoArgsConstructor
@Validated
public class CveMapper {

    private CveUtility cveUtility;

    @Autowired
    public CveMapper(CveUtility cveUtility){
        this.cveUtility = cveUtility;
    }

    public CveData fromCveModelToCveData(@NotNull CveModel cveModel){
        return CveData.builder()
                .id(cveModel.getId())
                .sourceIdentifier(cveModel.getSourceIdentifier())
                .published(cveUtility.convertStringToLocalDateTime(cveModel.getPublished()))
                .lastModified(cveUtility.convertStringToLocalDateTime(cveModel.getLastModified()))
                .vulnStatus(cveModel.getVulnStatus())
                .descriptions(cveModel.getDescriptions())
                .metrics(cveModel.getMetrics())
                .weaknesses(cveModel.getWeaknesses())
                .configurations(cveModel.getConfigurations())
                .references(cveModel.getReferences())
                .build();
    }

    public CveModel fromCveDataToCveModel(@NotNull CveData cveData){
        return CveModel.builder()
                .id(cveData.getId())
                .sourceIdentifier(cveData.getSourceIdentifier())
                .published(cveUtility.convertDateTimeToString(cveData.getPublished()))
                .lastModified(cveUtility.convertDateTimeToString(cveData.getLastModified()))
                .vulnStatus(cveData.getVulnStatus())
                .descriptions(cveData.getDescriptions())
                .metrics(cveData.getMetrics())
                .weaknesses(cveData.getWeaknesses())
                .configurations(cveData.getConfigurations())
                .references(cveData.getReferences())
                .build();
    }

    public List<CveData> mapNvdResponseToCveDataList(@NotNull NvdClientResponse nvdClientResponse) {
        var cveDataListMap = nvdClientResponse.getVulnerabilities();
        return cveDataListMap.stream().map(i -> i.get("cve")).filter(Objects::nonNull)
                .map(this::fromCveModelToCveData).toList();
    }
}
